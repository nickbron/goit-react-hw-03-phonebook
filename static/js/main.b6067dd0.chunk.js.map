{"version":3,"sources":["Componets/ContactForm/ContactForm.styled.jsx","Componets/ContactForm/ContactForm.jsx","Componets/ContactList/ContactList.styled.jsx","Componets/ContactList/ContactList.jsx","Componets/Filter/Filter.jsx","Componets/App.styled.jsx","Componets/App.jsx","index.js"],"names":["Form","styled","form","Input","input","Button","button","ContactForm","state","name","number","handleInputChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onAdd","reset","onSubmit","this","type","pattern","title","onChange","required","Component","ContactList","contacts","onDeleteContact","length","map","contact","onClick","id","Filter","filter","autoComplete","Card","div","App","addNewContact","person","shortid","generate","find","alert","prevState","deleteContact","localStorage","getItem","parsedContacts","JSON","parse","prevProps","console","log","setItem","stringify","normalizedFilter","toLowerCase","findContacts","includes","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6067dd0.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 10px;\r\n  width: 50%;\r\n  :focus {\r\n    border: 3px solid #555;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  padding: 5px 10px;\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n  width: 100px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  outline: none;\r\n  color: #fff;\r\n  background-color: #4caf50;\r\n  border: none;\r\n  border-radius: 15px;\r\n  box-shadow: 0 9px #999;\r\n\r\n  :hover {\r\n    background-color: #3e8e41;\r\n  }\r\n  :active {\r\n    background-color: #3e8e41;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n  }\r\n`;\r\n","import { Component } from 'react';\r\nimport { Button } from './ContactForm.styled';\r\nimport { Input } from './ContactForm.styled';\r\nimport { Form } from './ContactForm.styled';\r\n\r\nexport default class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onAdd(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () =>\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            value={this.state.name}\r\n            onChange={this.handleInputChange}\r\n            required\r\n          />\r\n          <Input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            value={this.state.number}\r\n            onChange={this.handleInputChange}\r\n            required\r\n          />\r\n          <Button type=\"submit\">Add contact</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import styled from '@emotion/styled';\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  padding: 5px 5px;\r\n  margin-left: 10px;\r\n  font-size: 10px;\r\n  width: 50px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  outline: none;\r\n  color: #fff;\r\n  background-color: #4caf50;\r\n  border: none;\r\n  border-radius: 15px;\r\n  /* box-shadow: 0 9px #999; */\r\n\r\n  :hover {\r\n    background-color: red;\r\n  }\r\n  :active {\r\n    background-color: red;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Button } from '../ContactList/ContactList.styled';\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <>\r\n      {contacts.length > 0 ? (\r\n        <ul>\r\n          {contacts.map(contact => (\r\n            <li key={contact.id}>\r\n              <span>{contact.name}:</span>\r\n              <span>{contact.number}</span>\r\n              <Button onClick={() => onDeleteContact(contact.id)} type=\"button\">\r\n                Delete\r\n              </Button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>Contact list is empty</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  //   onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import { Input } from '../ContactForm/ContactForm.styled';\r\n\r\nfunction Filter({ filter, onChange }) {\r\n  return (\r\n    <>\r\n      Find contacts by name:\r\n      <Input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        autoComplete=\"off\"\r\n        value={filter}\r\n        onChange={onChange}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Card = styled.div`\r\n  width: 400px;\r\n  padding: 20px;\r\n  margin: 20px;\r\n  border: 1px solid black;\r\n`;\r\n","import { Component } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from 'Componets/ContactForm/ContactForm';\nimport ContactList from 'Componets/ContactList/ContactList';\nimport Filter from 'Componets/Filter/Filter';\nimport { Card } from './App.styled';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n    name: '',\n    number: '',\n  };\n\n  addNewContact = person => {\n    const contact = {\n      id: shortid.generate(),\n      name: person.name,\n      number: person.number,\n    };\n    if (this.state.contacts.find(contact => contact.name === person.name)) {\n      alert(`${person.name} is already in contacts.`);\n      return;\n    }\n    this.setState(prevState => ({\n      contacts: [contact, ...prevState.contacts],\n    }));\n  };\n\n  handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  deleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(person => person.id !== id),\n    }));\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      console.log('обновилось');\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    const findContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n\n    return (\n      <Card>\n        <h1 className=\"title\">Phonebook</h1>\n\n        <ContactForm onAdd={this.addNewContact} />\n\n        <h2 className=\"title\">Contacts</h2>\n\n        <Filter filter={filter} onChange={this.handleInputChange} />\n        <ContactList\n          contacts={findContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </Card>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'Componets/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}